/* 定义内核的内存布局 */
ENTRY(boot) /* 程序入口点，boot 函数 */


/*
 *  SECTIONS 命令描述输出文件的内存布局
 *  定义了代码、只读数据、初始化数据和未初始化数据等段在内存中的位置
 */
SECTIONS {
    /* 设置当前位置计数器为 0x80200000，内核加载的起始地址
     * OpenSBI 跳转到内核入口点 
     */
    . = 0x80200000;
    /* 定义内核基地址符号，指向内核起始地址 */
    __kernel_base = .;

    /* .text 段包含可执行代码 */
    .text :{
        /* 保留 .text.boot 段，通常包含引导代码，即使没有被引用 */
        KEEP(*(.text.boot));
        /* 将其他代码段 (.text 和 .text.*) 放置在此段中 */
        *(.text .text.*);
    }

    /* .rodata 段包含只读数据，例如字符串字面量和常量*/
    .rodata : ALIGN(4) {
        /* 将所有只读数据段 (.rodata 和 .rodata.*) 放置在此段中，并进行 4 字节对齐 */
        *(.rodata .rodata.*); 
    }

    /* .data 段包含已初始化的数据，例如带有初始值的全局变量 */
    .data : ALIGN(4) {
        /* 将所有已初始化的数据段 (.data 和 .data.*) 放置在此段中，并进行 4 字节对齐 */
        *(.data .data.*); 
    }

    /* .bss 段包含未初始化的数据，例如没有显式初始化的全局变量 */
    .bss : ALIGN(4) {
        /* 定义 .bss 段起始地址的符号 */
        __bss = .; 
        /* 将所有未初始化的数据段 (.bss, .bss.*, .sbss, .sbss.*) 放置在此段中
         * .sbss 用于小块 BSS 数据 
         */
        *(.bss .bss.* .sbss .sbss.*); 
        /* 定义 .bss 段结束地址的符号 */
        __bss_end = .; 
    }

    . = ALIGN(4); /* 4 字节对齐 */
    . += 128 * 1024; /* 预留 128KB 作为栈 */
    __stack_top = .; /* 定义堆栈顶部的符号 */
        
    /* 栈向下（低地址）增长，堆向上（高地址）增长 */

    . = ALIGN(4096); /* 4096 字节（4KB）对齐 */
    __free_ram = .; /* 定义空闲 RAM 起始地址的符号 */
    . += 64 * 1024 * 1024; /* 预留 64MB 为空闲 RAM */
    __free_ram_end = .; /* 定义空闲 RAM 结束地址的符号 */
}